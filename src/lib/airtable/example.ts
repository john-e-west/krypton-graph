// ============================================================================\n// Airtable Services Usage Examples\n// This file demonstrates how to use the Airtable data access layer\n// ============================================================================\n\nimport {\n  airtableServices,\n  checkServiceHealth,\n  OntologyService,\n  EntityService,\n  EdgeService\n} from './services'\n\n// ============================================================================\n// Basic Usage Examples\n// ============================================================================\n\n/**\n * Example: Check service health before using\n */\nexport async function exampleHealthCheck() {\n  const health = checkServiceHealth()\n  \n  if (!health.ready) {\n    console.error('Airtable services not ready:', health)\n    throw new Error('Airtable client not configured properly')\n  }\n  \n  console.log('‚úÖ Airtable services ready:', health)\n}\n\n/**\n * Example: Working with Ontologies\n */\nexport async function exampleOntologyOperations() {\n  const { ontologyService } = airtableServices\n  \n  try {\n    // Create a new ontology\n    const newOntology = await ontologyService.createOntology({\n      name: 'Healthcare Knowledge Base',\n      description: 'Medical entities and relationships for healthcare applications',\n      domain: 'Healthcare',\n      version: '1.0.0',\n      notes: 'Initial version focusing on patient care workflows'\n    })\n    \n    console.log('‚úÖ Created ontology:', newOntology.id)\n    \n    // Find published ontologies\n    const publishedOntologies = await ontologyService.findPublished()\n    console.log(`üìö Found ${publishedOntologies.length} published ontologies`)\n    \n    // Search for ontologies\n    const searchResults = await ontologyService.searchByNameOrDescription('healthcare')\n    console.log(`üîç Search found ${searchResults.length} matching ontologies`)\n    \n    // Update ontology status\n    const updated = await ontologyService.updateStatus(\n      newOntology.id,\n      'Testing',\n      'Ready for initial testing phase'\n    )\n    \n    console.log('‚úÖ Updated ontology status to:', updated.fields.Status)\n    \n    // Get ontology statistics\n    const stats = await ontologyService.getStats()\n    console.log('üìä Ontology statistics:', stats)\n    \n  } catch (error) {\n    console.error('‚ùå Ontology operation failed:', error)\n    throw error\n  }\n}\n\n/**\n * Example: Working with Entity Definitions\n */\nexport async function exampleEntityOperations() {\n  const { entityService, ontologyService } = airtableServices\n  \n  try {\n    // First, get an ontology to work with\n    const ontologies = await ontologyService.findPublished()\n    if (ontologies.length === 0) {\n      throw new Error('No published ontologies found')\n    }\n    \n    const ontologyId = ontologies[0].id\n    \n    // Create entity definitions\n    const patientEntity = await entityService.createEntity({\n      name: 'Patient',\n      ontologyId,\n      entityClass: 'Person',\n      propertiesJson: JSON.stringify({\n        firstName: { type: 'string', required: true },\n        lastName: { type: 'string', required: true },\n        dateOfBirth: { type: 'date', required: true },\n        medicalRecordNumber: { type: 'string', unique: true }\n      }),\n      validationRules: 'firstName and lastName must be non-empty',\n      examples: 'John Doe, born 1985-03-15, MRN: P123456',\n      priority: 10,\n      description: 'A person receiving medical care'\n    })\n    \n    console.log('‚úÖ Created Patient entity:', patientEntity.id)\n    \n    const doctorEntity = await entityService.createEntity({\n      name: 'Doctor',\n      ontologyId,\n      entityClass: 'Person',\n      propertiesJson: JSON.stringify({\n        firstName: { type: 'string', required: true },\n        lastName: { type: 'string', required: true },\n        specialty: { type: 'string', required: true },\n        licenseNumber: { type: 'string', unique: true }\n      }),\n      priority: 9,\n      description: 'A licensed medical practitioner'\n    })\n    \n    console.log('‚úÖ Created Doctor entity:', doctorEntity.id)\n    \n    // Find entities by ontology\n    const entities = await entityService.findByOntology(ontologyId)\n    console.log(`üìã Found ${entities.length} entities in ontology`)\n    \n    // Get entities grouped by class\n    const groupedEntities = await entityService.getGroupedByClass(ontologyId)\n    console.log('üóÇÔ∏è Entities by class:', Object.keys(groupedEntities))\n    \n    // Update entity properties\n    const updatedPatient = await entityService.updateProperties(\n      patientEntity.id,\n      JSON.stringify({\n        firstName: { type: 'string', required: true },\n        lastName: { type: 'string', required: true },\n        dateOfBirth: { type: 'date', required: true },\n        medicalRecordNumber: { type: 'string', unique: true },\n        contactPhone: { type: 'phone', required: false } // Added new field\n      })\n    )\n    \n    console.log('‚úÖ Updated Patient entity properties')\n    \n    return { patientEntity, doctorEntity }\n    \n  } catch (error) {\n    console.error('‚ùå Entity operation failed:', error)\n    throw error\n  }\n}\n\n/**\n * Example: Working with Edge Definitions (Relationships)\n */\nexport async function exampleEdgeOperations() {\n  const { edgeService, entityService, ontologyService } = airtableServices\n  \n  try {\n    // Get entities to create relationships between\n    const ontologies = await ontologyService.findPublished()\n    if (ontologies.length === 0) {\n      throw new Error('No published ontologies found')\n    }\n    \n    const ontologyId = ontologies[0].id\n    const entities = await entityService.findByOntology(ontologyId)\n    \n    if (entities.length < 2) {\n      console.log('‚ö†Ô∏è Need at least 2 entities to create relationships')\n      return\n    }\n    \n    const patientEntity = entities.find(e => e.fields['Entity Name'] === 'Patient')\n    const doctorEntity = entities.find(e => e.fields['Entity Name'] === 'Doctor')\n    \n    if (!patientEntity || !doctorEntity) {\n      console.log('‚ö†Ô∏è Patient and Doctor entities not found')\n      return\n    }\n    \n    // Create relationship: Doctor treats Patient\n    const treatsRelationship = await edgeService.createEdge({\n      name: 'treats',\n      ontologyId,\n      sourceEntityId: doctorEntity.id,\n      targetEntityId: patientEntity.id,\n      edgeClass: 'CareRelationship',\n      cardinality: 'one-to-many',\n      bidirectional: false,\n      propertiesJson: JSON.stringify({\n        startDate: { type: 'date', required: true },\n        endDate: { type: 'date', required: false },\n        treatmentType: { type: 'string', enum: ['primary', 'specialist', 'consultant'] }\n      }),\n      description: 'Relationship indicating a doctor provides medical care to a patient'\n    })\n    \n    console.log('‚úÖ Created treats relationship:', treatsRelationship.id)\n    \n    // Create bidirectional relationship: Doctor knows Doctor (colleague)\n    const colleagueRelationship = await edgeService.createEdge({\n      name: 'colleague',\n      ontologyId,\n      sourceEntityId: doctorEntity.id,\n      targetEntityId: doctorEntity.id, // Self-referencing\n      edgeClass: 'ProfessionalRelationship',\n      cardinality: 'many-to-many',\n      bidirectional: true,\n      propertiesJson: JSON.stringify({\n        relationshipType: { type: 'string', enum: ['peer', 'mentor', 'mentee'] },\n        department: { type: 'string' }\n      }),\n      description: 'Professional relationship between healthcare providers'\n    })\n    \n    console.log('‚úÖ Created colleague relationship:', colleagueRelationship.id)\n    \n    // Find relationships between specific entities\n    const relationships = await edgeService.findBetweenEntities(\n      doctorEntity.id,\n      patientEntity.id\n    )\n    console.log(`üîó Found ${relationships.length} relationships between Doctor and Patient`)\n    \n    // Get entity relationship graph\n    const graph = await edgeService.getEntityGraph(ontologyId)\n    console.log(`üï∏Ô∏è Entity graph: ${graph.nodes.size} nodes, ${graph.edges.length} edges`)\n    console.log('üìä Adjacency list sample:', Object.keys(graph.adjacencyList).slice(0, 3))\n    \n    // Get edge statistics\n    const edgeStats = await edgeService.getStats(ontologyId)\n    console.log('üìà Edge statistics:', edgeStats)\n    \n  } catch (error) {\n    console.error('‚ùå Edge operation failed:', error)\n    throw error\n  }\n}\n\n/**\n * Example: Working with Test Data\n */\nexport async function exampleTestOperations() {\n  const { testDatasetService, testRunService, ontologyService } = airtableServices\n  \n  try {\n    // Create a test dataset\n    const testDataset = await testDatasetService.createTestDataset({\n      name: 'Sample Patient Records',\n      domain: 'Healthcare',\n      contentType: 'json',\n      sampleData: JSON.stringify([\n        {\n          text: 'Dr. Smith treated patient John Doe for diabetes on 2024-01-15.',\n          expected_entities: ['Dr. Smith', 'John Doe', 'diabetes'],\n          expected_relationships: [['Dr. Smith', 'treats', 'John Doe']]\n        },\n        {\n          text: 'Patient Mary Johnson visited cardiologist Dr. Brown.',\n          expected_entities: ['Mary Johnson', 'Dr. Brown', 'cardiologist'],\n          expected_relationships: [['Dr. Brown', 'treats', 'Mary Johnson']]\n        }\n      ]),\n      expectedEntitiesJson: JSON.stringify({\n        'Patient': 2,\n        'Doctor': 2,\n        'MedicalCondition': 1,\n        'Specialty': 1\n      }),\n      expectedEdgesJson: JSON.stringify({\n        'treats': 2\n      }),\n      description: 'Sample healthcare text for testing entity extraction',\n      size: 2\n    })\n    \n    console.log('‚úÖ Created test dataset:', testDataset.id)\n    \n    // Get an ontology for testing\n    const ontologies = await ontologyService.findPublished()\n    if (ontologies.length === 0) {\n      throw new Error('No published ontologies found')\n    }\n    \n    // Create a test run\n    const testRun = await testRunService.createTestRun({\n      name: 'Healthcare Entity Extraction Test #1',\n      ontologyId: ontologies[0].id,\n      datasetId: testDataset.id,\n      graphId: 'graph_healthcare_v1',\n      notes: 'Initial test run for healthcare entity extraction'\n    })\n    \n    console.log('‚úÖ Created test run:', testRun.id)\n    \n    // Simulate completing the test run\n    const completedTestRun = await testRunService.completeTestRun(testRun.id, {\n      entitiesExtracted: 6,\n      edgesExtracted: 2,\n      precision: 0.85,\n      recall: 0.90,\n      f1Score: 0.87,\n      impactReportJson: JSON.stringify({\n        summary: 'Good performance on healthcare text',\n        recommendations: ['Improve specialty recognition', 'Add more medical condition patterns'],\n        confidence_scores: { high: 4, medium: 2, low: 0 }\n      }),\n      notes: 'Test completed successfully. Good baseline performance.'\n    })\n    \n    console.log('‚úÖ Completed test run with F1 score:', completedTestRun.fields['F1 Score'])\n    \n    // Get test statistics\n    const testStats = await testRunService.getStats(ontologies[0].id)\n    console.log('üìä Test statistics:', testStats)\n    \n  } catch (error) {\n    console.error('‚ùå Test operation failed:', error)\n    throw error\n  }\n}\n\n/**\n * Example: Complete workflow - Create ontology, entities, relationships, and test\n */\nexport async function exampleCompleteWorkflow() {\n  console.log('üöÄ Starting complete Airtable workflow example...')\n  \n  try {\n    // 1. Check health\n    await exampleHealthCheck()\n    console.log('')\n    \n    // 2. Create ontology and entities\n    console.log('üìù Creating ontology...')\n    await exampleOntologyOperations()\n    console.log('')\n    \n    // 3. Create entities\n    console.log('üèóÔ∏è Creating entities...')\n    const { patientEntity, doctorEntity } = await exampleEntityOperations()\n    console.log('')\n    \n    // 4. Create relationships\n    console.log('üîó Creating relationships...')\n    await exampleEdgeOperations()\n    console.log('')\n    \n    // 5. Test the setup\n    console.log('üß™ Running tests...')\n    await exampleTestOperations()\n    console.log('')\n    \n    console.log('‚úÖ Complete workflow example finished successfully!')\n    \n  } catch (error) {\n    console.error('‚ùå Workflow example failed:', error)\n    throw error\n  }\n}\n\n/**\n * Example: Error handling patterns\n */\nexport async function exampleErrorHandling() {\n  const { ontologyService } = airtableServices\n  \n  try {\n    // This will fail due to duplicate name\n    await ontologyService.createOntology({ name: 'Duplicate Test' })\n    await ontologyService.createOntology({ name: 'Duplicate Test' }) // Will throw error\n    \n  } catch (error) {\n    if (error.message.includes('already exists')) {\n      console.log('‚úÖ Correctly caught duplicate ontology error')\n    } else {\n      console.error('‚ùå Unexpected error:', error)\n    }\n  }\n  \n  try {\n    // This will fail due to missing required field\n    await ontologyService.createOntology({ name: '' })\n    \n  } catch (error) {\n    if (error.message.includes('required')) {\n      console.log('‚úÖ Correctly caught validation error')\n    } else {\n      console.error('‚ùå Unexpected error:', error)\n    }\n  }\n}\n\n// ============================================================================\n// Export for use in application\n// ============================================================================\n\nexport const examples = {\n  healthCheck: exampleHealthCheck,\n  ontologyOperations: exampleOntologyOperations,\n  entityOperations: exampleEntityOperations,\n  edgeOperations: exampleEdgeOperations,\n  testOperations: exampleTestOperations,\n  completeWorkflow: exampleCompleteWorkflow,\n  errorHandling: exampleErrorHandling\n}\n\nexport default examples"